group_data <- clean_data %>%
mutate(Region = case_when(
NHS %in% c("Ayrshire & Arran" , "Borders" , "Dumfries & Galloway")
~ "Borders",
NHS %in% c("Fife" , "Forth Valley" , "Greater Glasgow & Clyde" ,
"Lanarkshire" , "Lothian")
~ "Central Belt",
NHS %in% c("Grampian" , "Tayside")
~ "North East",
NHS %in% c("Highland" , "Western Isles" , "Orkney" , "Shetland")
~ "Highlands & Islands"))
#Now to re-calculate the regional percentages
summed_data <- group_data %>%
group_by(Region, year) %>%
summarise(total_people = sum(number))
#Now to re-calculate the regional percentages
summed_data <- group_data %>%
group_by(Region, year) %>%
summarise(total_people = sum(no_prescriptions))
#Now to re-calculate the regional percentages
summed_data <- group_data %>%
group_by(Region, year) %>%
summarise(total_people = sum(no_prescriptions))
head(summed_data)
#Now to re-calculate the regional percentages
summed_data <- group_data %>%
group_by(Region, year) %>%
summarise(percentage = no_prescriptions / board_population * 100)
head(summed_data)
options(scipen = 999)
summed_data %>%
ggplot(aes(x = year, y = percentage, fill = Region)) +
geom_area()+
xlab("Year")+
ylab("Percentage of people")+
ggtitle("Trend in estimated population prescribed drugs for anxiety, depression or psychosis in Scotland by region")+
scale_fill_viridis(discrete=TRUE)+
scale_x_continuous(breaks = unique(summed_data$year))+
theme_bw()
# If switching the output to html, this line shows values when hovered over.
# It's commented out here because the output is PDF.
# ggplotly(tooltip = c("x", "y"))
#Now to re-calculate the regional percentages
summed_data <- group_data %>%
group_by(Region, year) %>%
summarise(percentage = sum(no_prescriptions / board_population * 100))
head(summed_data)
options(scipen = 999)
summed_data %>%
ggplot(aes(x = year, y = percentage, fill = Region)) +
geom_area()+
xlab("Year")+
ylab("Percentage of people")+
ggtitle("Trend in estimated population prescribed drugs for anxiety, depression or psychosis in Scotland by region")+
scale_fill_viridis(discrete=TRUE)+
scale_x_continuous(breaks = unique(summed_data$year))+
theme_bw()
# If switching the output to html, this line shows values when hovered over.
# It's commented out here because the output is PDF.
# ggplotly(tooltip = c("x", "y"))
#Now to re-calculate the regional percentages
summed_data <- group_data %>%
group_by(Region, year) %>%
mutate(region_pop = sum(board_population)) %>%
mutate(region_prescrptions = sum(no_prescriptions))
summarise(percentage = sum(no_prescriptions / region_pop * 100))
#Now to re-calculate the regional percentages
summed_data <- group_data %>%
group_by(Region, year) %>%
mutate(region_pop = sum(board_population)) %>%
mutate(region_prescrptions = sum(no_prescriptions)) %>%
summarise(percentage = sum(no_prescriptions / region_pop * 100))
head(summed_data)
options(scipen = 999)
summed_data %>%
ggplot(aes(x = year, y = percentage, fill = Region)) +
geom_area()+
xlab("Year")+
ylab("Percentage of people")+
ggtitle("Trend in estimated population prescribed drugs for anxiety, depression or psychosis in Scotland by region")+
scale_fill_viridis(discrete=TRUE)+
scale_x_continuous(breaks = unique(summed_data$year))+
theme_bw()
# If switching the output to html, this line shows values when hovered over.
# It's commented out here because the output is PDF.
# ggplotly(tooltip = c("x", "y"))
#Now to re-calculate the regional percentages
summed_data <- group_data %>%
group_by(Region, year) %>%
mutate(region_pop = sum(board_population)) %>%
mutate(region_prescrptions = sum(no_prescriptions)) %>%
summarise(percentage = no_prescriptions / sum(region_pop) * 100)
head(summed_data)
options(scipen = 999)
summed_data %>%
ggplot(aes(x = year, y = percentage, fill = Region)) +
geom_area()+
xlab("Year")+
ylab("Percentage of people")+
ggtitle("Trend in estimated population prescribed drugs for anxiety, depression or psychosis in Scotland by region")+
scale_fill_viridis(discrete=TRUE)+
scale_x_continuous(breaks = unique(summed_data$year))+
theme_bw()
# If switching the output to html, this line shows values when hovered over.
# It's commented out here because the output is PDF.
# ggplotly(tooltip = c("x", "y"))
knitr::opts_chunk$set(echo = TRUE)
# tidyverse includes dplyr and ggplot2 so I don't need to load them separately
library(tidyverse)
library(here)
library(viridis)
library(plotly)
#reading in the data and checking its columns:
adp_data <- read_csv(here("Inputs/timetrend_data.csv"))
glimpse(adp_data)
#I wanted to use functions from the course but when I looked up how to recategorise a categorical variable, all the answers were using functions we hadn't used. So, I asked chatgpt. First, it advised a statement for each NHS Board but I knew it could be done in groups and using | or %in% so I modified the prompt.
group_data <- clean_data %>%
mutate(Region = case_when(
NHS %in% c("Ayrshire & Arran" , "Borders" , "Dumfries & Galloway")
~ "Borders",
NHS %in% c("Fife" , "Forth Valley" , "Greater Glasgow & Clyde" ,
"Lanarkshire" , "Lothian")
~ "Central Belt",
NHS %in% c("Grampian" , "Tayside")
~ "North East",
NHS %in% c("Highland" , "Western Isles" , "Orkney" , "Shetland")
~ "Highlands & Islands"))
#
# This chunk is for selecting and renaming columns, removing the rows for the
# whole of Scotland and removing the NHS prefix.
# The mutate NHS line was suggested by chatgpt when I gave it the preceding lines
# in this chunk and asked it what to add to strip out the "NHS " prefix.
clean_data <- adp_data %>%
select('area_name','year','numerator', 'measure') %>%
rename(no_prescriptions = 'numerator', NHS = 'area_name', percentage_pop = 'measure') %>%
filter(NHS !='Scotland') %>%
mutate(NHS = sub("^NHS ","", NHS)) %>%
mutate(board_population = no_prescriptions / percentage_pop * 100)
head(clean_data)
#I wanted to use functions from the course but when I looked up how to recategorise a categorical variable, all the answers were using functions we hadn't used. So, I asked chatgpt. First, it advised a statement for each NHS Board but I knew it could be done in groups and using | or %in% so I modified the prompt.
group_data <- clean_data %>%
mutate(Region = case_when(
NHS %in% c("Ayrshire & Arran" , "Borders" , "Dumfries & Galloway")
~ "Borders",
NHS %in% c("Fife" , "Forth Valley" , "Greater Glasgow & Clyde" ,
"Lanarkshire" , "Lothian")
~ "Central Belt",
NHS %in% c("Grampian" , "Tayside")
~ "North East",
NHS %in% c("Highland" , "Western Isles" , "Orkney" , "Shetland")
~ "Highlands & Islands"))
#Now to re-calculate the regional percentages
summed_data <- group_data %>%
group_by(Region, year) %>%
mutate(region_pop = sum(board_population)) %>%
mutate(region_prescriptions = sum(no_prescriptions)) %>%
summarise(percentage = region_prescriptions / sum()) * 100)
#Now to re-calculate the regional percentages
summed_data <- group_data %>%
group_by(Region, year) %>%
mutate(region_pop = sum(board_population)) %>%
mutate(region_prescriptions = sum(no_prescriptions)) %>%
summarise(percentage = region_prescriptions / sum() * 100)
head(summed_data)
knitr::opts_chunk$set(echo = TRUE)
# tidyverse includes dplyr and ggplot2 so I don't need to load them separately
library(tidyverse)
library(here)
library(viridis)
library(plotly)
#reading in the data and checking its columns:
adp_data <- read_csv(here("Inputs/timetrend_data.csv"))
glimpse(adp_data)
# checking for duplicates
unique_columns <- c("area_code", "year")
duplicates <- adp_data[duplicated(adp_data[, unique_columns]) | duplicated(adp_data[, unique_columns], fromLast = TRUE), ]
print(duplicates)
# This chunk is for selecting and renaming columns and removing the NHS prefix.
clean_data <- adp_data %>%
select('area_name','year','numerator', 'measure') %>%
rename(no_prescriptions = 'numerator', NHS = 'area_name', percentage_pop = 'measure') %>%
mutate(NHS = sub("^NHS ","", NHS)) %>%
# the below line is necessary to calculate the national population for recalulating percentages later
mutate(board_population = no_prescriptions / percentage_pop * 100)
view(clean_data)
#This chunk groups the boards into regions
group_data <- clean_data %>%
mutate(Region = case_when(
NHS %in% c("Ayrshire & Arran" , "Borders" , "Dumfries & Galloway")
~ "Borders",
NHS %in% c("Fife" , "Forth Valley" , "Greater Glasgow & Clyde" ,
"Lanarkshire" , "Lothian")
~ "Central Belt",
NHS %in% c("Grampian" , "Tayside")
~ "North East",
NHS %in% c("Highland" , "Western Isles" , "Orkney" , "Shetland")
~ "Highlands & Islands",
NHS %in% c("Scotland") ~ "Scotland"))
view(group_data)
# The below is all one chunk because it would not work separately. ChatGPT said this was because each chunk is a separate environment and variables created in one are not available in another.
# The below creates a total number of prescriptions per region
regional_data <- group_data %>%
group_by(Region, year) %>%
summarise(board_population = sum(board_population), regional_prescriptions = sum(no_prescriptions))
view(regional_data)
# The below creates a tibble for the annual calculated Scottish population
scotland_population <- regional_data %>% filter(Region == "Scotland") %>%
rename(whole_population = board_population, scotland_prescriptions = regional_prescriptions)
view(scotland_population)
# The below creates each regional number of prescriptions as a percentage of the scottish population for that year.
plot_data <- regional_data %>%
left_join(scotland_population, by = 'year') %>%
mutate(percentage_scot_pop = regional_prescriptions / whole_population * 100)
view(plot_data)
plot_data %>%
filter(Region.x != "Scotland") %>%
ggplot(aes(x = year, y = percentage_scot_pop, fill = Region.x)) +
geom_area()+
xlab("Year")+
ylab("number of prescriptions as percentage of population")+
ggtitle("Trend in estimated population percentage prescribed drugs for anxiety, depression or psychosis in Scotland by region")+
scale_fill_viridis(discrete=TRUE)+
scale_x_continuous(breaks = unique(summed_data$year))+
theme_bw()
plot_data %>%
filter(Region.x != "Scotland") %>%
ggplot(aes(x = year, y = percentage_scot_pop, fill = Region.x)) +
geom_area()+
xlab("Year")+
ylab("number of prescriptions as percentage of population")+
ggtitle("Trend in estimated population percentage prescribed drugs for anxiety, depression or psychosis in Scotland by region")+
scale_fill_viridis(discrete=TRUE)+
scale_x_continuous(breaks = unique)+
theme_bw()
# If switching the output to html, this line shows values when hovered over.
# It's commented out here because the output is PDF.
#ggplotly(tooltip = c("x", "y"))
plot_data %>%
filter(Region.x != "Scotland") %>%
ggplot(aes(x = year, y = percentage_scot_pop, fill = Region.x)) +
geom_area()+
xlab("Year")+
ylab("number of prescriptions as percentage of population")+
ggtitle("Trend in estimated population percentage prescribed drugs for
anxiety, depression or psychosis in Scotland by region")+
scale_fill_viridis(discrete=TRUE)+
scale_x_continuous(breaks = unique)+
theme_bw()
# If switching the output to html, this line shows values when hovered over.
# It's commented out here because the output is PDF.
#ggplotly(tooltip = c("x", "y"))
plot_data %>%
filter(Region.x != "Scotland") %>%
ggplot(aes(x = year, y = percentage_scot_pop, fill = Region.x)) +
geom_area()+
xlab("Year")+
ylab("number of prescriptions as percentage of population")+
ggtitle("Trend in estimated population percentage prescribed drugs for
anxiety, depression or psychosis in Scotland by region")+
scale_fill_viridis(discrete=TRUE)+
scale_x_continuous(breaks = unique)+
scale_x_continuous(breaks = unique)+
theme_bw()
# If switching the output to html, this line shows values when hovered over.
# It's commented out here because the output is PDF.
#ggplotly(tooltip = c("x", "y"))
plot_data %>%
filter(Region.x != "Scotland") %>%
ggplot(aes(x = year, y = percentage_scot_pop, fill = Region.x)) +
geom_area()+
xlab("Year")+
ylab("number of prescriptions as percentage of population")+
ggtitle("Trend in estimated population percentage prescribed drugs for
anxiety, depression or psychosis in Scotland by region")+
scale_fill_viridis(discrete=TRUE)+
scale_x_continuous(breaks = unique(plot_data$year))+
theme_bw()
# If switching the output to html, this line shows values when hovered over.
# It's commented out here because the output is PDF.
#ggplotly(tooltip = c("x", "y"))
plot_data %>%
filter(Region.x != "Scotland") %>%
ggplot(aes(x = year, y = percentage_scot_pop, fill = Region.x)) +
geom_area()+
labs(colour="Region")+
xlab("Year")+
ylab("number of prescriptions as percentage of population")+
ggtitle("Trend in estimated population percentage prescribed drugs for
anxiety, depression or psychosis in Scotland by region")+
scale_fill_viridis(discrete=TRUE)+
scale_x_continuous(breaks = unique(plot_data$year))+
theme_bw()
# If switching the output to html, this line shows values when hovered over.
# It's commented out here because the output is PDF.
#ggplotly(tooltip = c("x", "y"))
plot_data %>%
filter(Region.x != "Scotland") %>%
ggplot(aes(x = year, y = percentage_scot_pop, fill = Region.x)) +
geom_area()+
labs(fill="Region")+
xlab("Year")+
ylab("number of prescriptions as percentage of population")+
ggtitle("Trend in estimated population percentage prescribed drugs for
anxiety, depression or psychosis in Scotland by region")+
scale_fill_viridis(discrete=TRUE)+
scale_x_continuous(breaks = unique(plot_data$year))+
theme_bw()
# If switching the output to html, this line shows values when hovered over.
# It's commented out here because the output is PDF.
#ggplotly(tooltip = c("x", "y"))
plot_data %>%
filter(Region.x != "Scotland") %>%
ggplot(aes(x = year, y = percentage_scot_pop, fill = Region.x)) +
geom_area()+
labs(fill="Region")+
xlab("Year")+
ylab("number of prescriptions as percentage of population")+
ggtitle("Trend in estimated population percentage prescribed drugs for
anxiety, depression or psychosis in Scotland by region")+
scale_fill_viridis(discrete=TRUE)+
scale_x_continuous(breaks = unique(plot_data$year))+
theme_bw()
# If switching the output to html, this line shows values when hovered over.
# It's commented out here because the output is PDF.
ggplotly(tooltip = c("x", "y"), p(Borders = "Ayrshire & Arran, Borders, Dumfries & Galloway"))
plot_data %>%
filter(Region.x != "Scotland") %>%
ggplot(aes(x = year, y = percentage_scot_pop, fill = Region.x)) +
geom_area()+
labs(fill="Region")+
xlab("Year")+
ylab("number of prescriptions as percentage of population")+
ggtitle("Trend in estimated population percentage prescribed drugs for
anxiety, depression or psychosis in Scotland by region")+
scale_fill_viridis(discrete=TRUE)+
scale_x_continuous(breaks = unique(plot_data$year))+
theme_bw()
# If switching the output to html, this line shows values when hovered over.
# It's commented out here because the output is PDF.
ggplotly(p, tooltip(Borders = "Ayrshire & Arran, Borders, Dumfries & Galloway"))
plot_data %>%
filter(Region.x != "Scotland") %>%
ggplot(aes(x = year, y = percentage_scot_pop, fill = Region.x)) +
geom_area()+
labs(fill="Region")+
xlab("Year")+
ylab("number of prescriptions as percentage of population")+
ggtitle("Trend in estimated population percentage prescribed drugs for
anxiety, depression or psychosis in Scotland by region")+
scale_fill_viridis(discrete=TRUE)+
scale_x_continuous(breaks = unique(plot_data$year))+
theme_bw()
# If switching the output to html, this line shows values when hovered over.
# It's commented out here because the output is PDF.
ggplotly(tooltip(Borders = "Ayrshire & Arran, Borders, Dumfries & Galloway"))
plot_data %>%
filter(Region.x != "Scotland") %>%
ggplot(aes(x = year, y = percentage_scot_pop, fill = Region.x)) +
geom_area()+
labs(fill="Region")+
xlab("Year")+
ylab("number of prescriptions as percentage of population")+
ggtitle("Trend in estimated population percentage prescribed drugs for
anxiety, depression or psychosis in Scotland by region")+
scale_fill_viridis(discrete=TRUE)+
scale_x_continuous(breaks = unique(plot_data$year))+
theme_bw()
# If switching the output to html, this line shows values when hovered over.
# It's commented out here because the output is PDF.
ggplotly(tooltip = c("x", "y"))
plot_data %>%
filter(Region.x != "Scotland") %>%
ggplot(aes(x = year, y = percentage_scot_pop, fill = Region.x)) +
geom_area()+
labs(fill="Region")+
xlab("Year")+
ylab("number of prescriptions as percentage of population")+
ggtitle("Trend in estimated population percentage prescribed drugs for
anxiety, depression or psychosis in Scotland by region")+
scale_fill_viridis(discrete=TRUE)+
scale_x_continuous(breaks = unique(plot_data$year))+
theme_bw()
# tidyverse includes dplyr and ggplot2 so I don't need to load them separately
library(tidyverse)
library(here)
library(viridis)
# This chunk is for selecting and renaming columns and removing the NHS prefix.
clean_data <- adp_data %>%
select('area_name','year','numerator', 'measure') %>%
rename(no_prescriptions = 'numerator', NHS = 'area_name',
percentage_pop = 'measure') %>%
mutate(NHS = sub("^NHS ","", NHS)) %>%
# the below line is necessary to calculate the national population for
# recalculating percentages later
mutate(board_population = no_prescriptions / percentage_pop * 100)
glimpse(clean_data)
#This chunk groups the boards into regions
group_data <- clean_data %>%
mutate(Region = case_when(
NHS %in% c("Ayrshire & Arran" , "Borders" , "Dumfries & Galloway")
~ "Borders",
NHS %in% c("Fife" , "Forth Valley" , "Greater Glasgow & Clyde" ,
"Lanarkshire" , "Lothian")
~ "Central Belt",
NHS %in% c("Grampian" , "Tayside")
~ "North East",
NHS %in% c("Highland" , "Western Isles" , "Orkney" , "Shetland")
~ "Highlands & Islands",
NHS %in% c("Scotland") ~ "Scotland"))
glimpse(group_data)
# The below is all one chunk because it would not work in separate chunks.
# This code was difficult to arrive at and could be reworked.
# The below creates a total number of prescriptions per region
regional_data <- group_data %>%
group_by(Region, year) %>%
summarise(board_population = sum(board_population), regional_prescriptions =
sum(no_prescriptions))
# The below creates a tibble for the annual calculated Scottish population
scotland_population <- regional_data %>% filter(Region == "Scotland") %>%
rename(whole_population = board_population, scotland_prescriptions =
regional_prescriptions)
# The below creates each regional number of prescriptions as a percentage of the
#scottish population for that year.
plot_data <- regional_data %>%
left_join(scotland_population, by = 'year') %>%
mutate(percentage_scot_pop = regional_prescriptions / whole_population * 100)
glimpse(plot_data)
plot_data %>%
filter(Region.x != "Scotland") %>%
ggplot(aes(x = year, y = percentage_scot_pop, fill = Region.x)) +
geom_area()+
labs(fill="Region")+
xlab("Year")+
ylab("number of prescriptions as percentage of population")+
ggtitle("Trend in estimated population percentage prescribed drugs for
anxiety, depression or psychosis in Scotland by region")+
scale_fill_viridis(discrete=TRUE)+
scale_x_continuous(breaks = unique(plot_data$year))+
theme_bw()
Region_lists <- data.frame(
Borders = c("NHS Ayrshire & Arran", "NHS Borders", "Dumfries & Galloway"),
Central Belt = c("Fife" , "Forth Valley" , "Greater Glasgow & Clyde" ,
Region_lists <- data.frame(
Borders = c("NHS Ayrshire & Arran", "NHS Borders", "Dumfries & Galloway"),
Central_Belt = c("Fife" , "Forth Valley" , "Greater Glasgow & Clyde" ,
"Lanarkshire" , "Lothian"),
North_East = c("Grampian" , "Tayside"),
Highlands & Islands = c(c("Highland" , "Western Isles" , "Orkney" , "Shetland")
Region_lists <- data.frame(
Borders = c("NHS Ayrshire & Arran", "NHS Borders", "Dumfries & Galloway"),
Central_Belt = c("Fife" , "Forth Valley" , "Greater Glasgow & Clyde" ,
"Lanarkshire" , "Lothian"),
North_East = c("Grampian" , "Tayside"),
Highlands & Islands = c("Highland" , "Western Isles" , "Orkney" , "Shetland")
Region_lists <- data.frame(
Borders = c("NHS Ayrshire & Arran", "NHS Borders", "Dumfries & Galloway"),
Central_Belt = c("Fife" , "Forth Valley" , "Greater Glasgow & Clyde" ,
"Lanarkshire" , "Lothian"),
North_East = c("Grampian" , "Tayside"),
Highlands_&_Islands = c("Highland" , "Western Isles" , "Orkney" , "Shetland")
Region_lists <- data.frame(
Borders = c("NHS Ayrshire & Arran", "NHS Borders", "Dumfries & Galloway"),
Central_Belt = c("Fife" , "Forth Valley" , "Greater Glasgow & Clyde" ,
"Lanarkshire" , "Lothian"),
North_East = c("Grampian" , "Tayside"),
Highlands_&_Islands = c("Highland" , "Western Isles" , "Orkney" , "Shetland")
Region_lists <- data.frame(
Borders = c("NHS Ayrshire & Arran", "NHS Borders", "Dumfries & Galloway"),
Central_Belt = c("Fife" , "Forth Valley" , "Greater Glasgow & Clyde" ,
"Lanarkshire" , "Lothian"),
North_East = c("Grampian", "Tayside"),
Highlands_&_Islands = c("Highland" , "Western Isles" , "Orkney" , "Shetland")
Region_lists <- data.frame(
Borders = c("NHS Ayrshire & Arran", "NHS Borders", "Dumfries & Galloway"),
Central_Belt = c("Fife" , "Forth Valley" , "Greater Glasgow & Clyde" ,
"Lanarkshire" , "Lothian"),
North_East = c("Grampian", "Tayside"),
Highlands_and_Islands = c("Highland" , "Western Isles" , "Orkney" , "Shetland")
view(Region_lists)
Region_lists <- data.frame(
Borders = c("NHS Ayrshire & Arran", "NHS Borders", "Dumfries & Galloway"),
Central_Belt = c("Fife" , "Forth Valley" , "Greater Glasgow & Clyde" ,
"Lanarkshire" , "Lothian"),
North_East = c("Grampian", "Tayside"),
Highlands_and_Islands = c("Highland" , "Western Isles" , "Orkney" , "Shetland")
view(Region_lists)
Region_lists <- data.frame(
Borders = c("NHS Ayrshire & Arran", "NHS Borders", "Dumfries & Galloway"),
Central_Belt = c("Fife" , "Forth Valley" , "Greater Glasgow & Clyde" ,
"Lanarkshire" , "Lothian"),
North_East = c("Grampian", "Tayside"),
Highlands_and_Islands = c("Highland" , "Western Isles" , "Orkney" , "Shetland")
View(Region_lists)
Region_lists <- data.frame(
Borders = c("NHS Ayrshire & Arran", "NHS Borders", "Dumfries & Galloway"),
Central_Belt = c("Fife" , "Forth Valley" , "Greater Glasgow & Clyde" ,
"Lanarkshire" , "Lothian"),
North_East = c("Grampian", "Tayside"),
Highlands_and_Islands = c("Highland" , "Western Isles" , "Orkney" , "Shetland"))
Region_lists <- data.frame(
Borders = list("NHS Ayrshire & Arran", "NHS Borders", "Dumfries & Galloway"),
Central_Belt = list("Fife" , "Forth Valley" , "Greater Glasgow & Clyde" ,
"Lanarkshire" , "Lothian"),
North_East = list("Grampian", "Tayside"),
Highlands_and_Islands = list("Highland" , "Western Isles" , "Orkney" , "Shetland"))
View(Region_lists)
Region_lists <- data.frame(
Borders = c(list("NHS Ayrshire & Arran", "NHS Borders", "Dumfries & Galloway")),
Central_Belt = c("Fife" , "Forth Valley" , "Greater Glasgow & Clyde" ,
"Lanarkshire" , "Lothian"),
North_East = c("Grampian", "Tayside"),
Highlands_and_Islands = c("Highland" , "Western Isles" , "Orkney" , "Shetland"))
